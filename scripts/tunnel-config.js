/**
 * –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
 */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ü—É—Ç—å –∫ app.json
const appJsonPath = path.resolve(__dirname, '..', 'app.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL API
async function setupTunnelConfig() {
  try {
    console.log('üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    // –ß—Ç–µ–Ω–∏–µ app.json
    const appJsonContent = fs.readFileSync(appJsonPath, 'utf-8');
    const appJson = JSON.parse(appJsonContent);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å back-end
    console.log('‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
    console.log('1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–∞—à API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π URL');
    console.log('2. –£–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç URL –≤ services/api.ts');
    console.log('');
    
    // –ó–∞–ø—Ä–æ—Å URL
    rl.question('–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –≤–∞—à–µ–≥–æ API (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ', (apiUrl) => {
      if (apiUrl) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª api.ts —Å –ø—É–±–ª–∏—á–Ω—ã–º URL
        const apiFilePath = path.resolve(__dirname, '..', 'services', 'api.ts');
        
        if (fs.existsSync(apiFilePath)) {
          let apiContent = fs.readFileSync(apiFilePath, 'utf-8');
          
          // –ó–∞–º–µ–Ω—è–µ–º URL –≤ —Ñ–∞–π–ª–µ
          apiContent = apiContent.replace(
            /['"]https:\/\/your-api-public-url\.com['"]/, 
            `'${apiUrl}'`
          );
          
          fs.writeFileSync(apiFilePath, apiContent);
          console.log(`‚úÖ URL API –æ–±–Ω–æ–≤–ª–µ–Ω: ${apiUrl}`);
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ç—É–Ω–Ω–µ–ª—è –≤ app.json
      if (!appJson.expo.extra) {
        appJson.expo.extra = {};
      }
      
      appJson.expo.extra.host = 'tunnel';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π app.json
      fs.writeFileSync(appJsonPath, JSON.stringify(appJson, null, 2));
      
      console.log('‚úÖ –†–µ–∂–∏–º —Ç—É–Ω–Ω–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ app.json');
      console.log('');
      console.log('üöÄ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm run start:tunnel');
      
      rl.close();
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è:', error);
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
setupTunnelConfig(); 