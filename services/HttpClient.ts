import NetInfo from '@react-native-community/netinfo';
import { ProgressEvent } from '@/types';
import { Platform } from 'react-native';
// –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ auth modules
// import { authStorage } from '@/modules/auth/services';

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–∫–µ–Ω-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
export interface TokenProvider {
  getAuthToken(): Promise<string | null>;
}

interface HttpResponse<T> {
  data: T | null;
  error: string | null;
  status: number;
}

interface RequestOptions {
  headers?: Record<string, string>;
  timeout?: number;
  onUploadProgress?: (progressEvent: ProgressEvent) => void;
  skipAuth?: boolean; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
}

interface ApiError {
  message: string;
  [key: string]: unknown;
}

type RequestBody = Record<string, unknown> | unknown[];

class HttpClient {
  private baseUrl: string;
  private defaultHeaders: Record<string, string>;
  private defaultTimeout: number;
  private authToken: string | null = null;
  private tokenProvider: TokenProvider | null = null;

  constructor(
    baseUrl: string,
    defaultHeaders: Record<string, string> = {},
    defaultTimeout: number = 30000,
    tokenProvider: TokenProvider | null = null
  ) {
    this.baseUrl = baseUrl;
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      ...defaultHeaders,
    };
    this.defaultTimeout = defaultTimeout;
    this.tokenProvider = tokenProvider;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.loadAuthToken();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  public async loadAuthToken(): Promise<void> {
    try {
      if (this.tokenProvider) {
        const token = await this.tokenProvider.getAuthToken();
        if (token) {
          this.authToken = token;
          this.setDefaultHeader('Authorization', `Bearer ${token}`);
        }
      }
    } catch (error) {
      // –£–¥–∞–ª–µ–Ω console.error
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @param token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  public setAuthToken(token: string): void {
    this.authToken = token;
    this.setDefaultHeader('Authorization', `Bearer ${token}`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  public clearAuthToken(): void {
    this.authToken = null;
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { Authorization, ...rest } = this.defaultHeaders;
    this.defaultHeaders = rest;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   * @param name –ò–º—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
   * @param value –ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
   */
  public setDefaultHeader(name: string, value: string): void {
    this.defaultHeaders[name] = value;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  public getDefaultHeaders(): Record<string, string> {
    return { ...this.defaultHeaders };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  private async checkNetworkConnectivity(): Promise<boolean> {
    const netInfoState = await NetInfo.fetch();
    return netInfoState.isConnected === true;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  private async getHeaders(options?: RequestOptions): Promise<Record<string, string>> {
    const headers = {
      ...this.defaultHeaders,
      ...options?.headers,
    };

    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!headers['Authorization'] && !options?.skipAuth) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      if (!this.authToken) {
        await this.loadAuthToken();
      }
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (this.authToken) {
        headers['Authorization'] = `Bearer ${this.authToken}`;
      }
    }

    return headers;
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  private async request<T>(
    endpoint: string,
    method: string,
    data?: RequestBody,
    options?: RequestOptions
  ): Promise<HttpResponse<T>> {
    const isConnected = await this.checkNetworkConnectivity();

    if (!isConnected) {
      return {
        data: null,
        error: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        status: 0,
      };
    }

    const url = `${this.baseUrl}${endpoint}`;
    const headers = await this.getHeaders(options);

    if (Platform.OS !== 'web' && __DEV__) {
      // –£–¥–∞–ª–µ–Ω console.log
    }

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(
        () => controller.abort(),
        options?.timeout || this.defaultTimeout
      );

      const response = await fetch(url, {
        method,
        headers,
        body: data ? JSON.stringify(data) : undefined,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      let responseData: unknown;
      const contentType = response.headers.get('content-type');

      if (contentType && contentType.includes('application/json')) {
        responseData = await response.json();
      } else {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        responseData = await response.text();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      // if (Platform.OS !== 'web' && __DEV__) {
      //   console.log(`${method} –æ—Ç–≤–µ—Ç:`, { 
      //     url, 
      //     status: response.status, 
      //     ok: response.ok,
      //     data: responseData 
      //   });
      // }

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 401 (Unauthorized), —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–µ–∫
      if (response.status === 401) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        // –£–¥–∞–ª–µ–Ω console.error
      }

      return {
        data: response.ok ? (responseData as T) : null,
        error: response.ok
          ? null
          : typeof responseData === 'object' && responseData
            ? (
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'message' –≤ –æ—Ç–≤–µ—Ç–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –¥–ª—è –º–Ω–æ–≥–∏—Ö API)
              'message' in responseData 
                ? (responseData as ApiError).message
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 'error' (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—à–µ–º –±—ç–∫–µ–Ω–¥–µ)
                : 'error' in responseData && typeof responseData.error === 'string' 
                  ? responseData.error as string
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏ error, –Ω–∏ message –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  : `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`
            )
            : `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`,
        status: response.status,
      };
    } catch (error) {
      if (Platform.OS !== 'web' && __DEV__) {
        // –£–¥–∞–ª–µ–Ω console.error
      }

      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return {
            data: null,
            error: '–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ',
            status: 408,
          };
        }

        return {
          data: null,
          error: error.message,
          status: 500,
        };
      }

      return {
        data: null,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 500,
      };
    }
  }

  // GET –∑–∞–ø—Ä–æ—Å
  async get<T>(endpoint: string, options?: RequestOptions): Promise<HttpResponse<T>> {
    return this.request<T>(endpoint, 'GET', undefined, options);
  }

  // POST –∑–∞–ø—Ä–æ—Å
  async post<T>(endpoint: string, data: RequestBody, options?: RequestOptions): Promise<HttpResponse<T>> {
    return this.request<T>(endpoint, 'POST', data, options);
  }

  // PUT –∑–∞–ø—Ä–æ—Å
  async put<T>(endpoint: string, data: RequestBody, options?: RequestOptions): Promise<HttpResponse<T>> {
    return this.request<T>(endpoint, 'PUT', data, options);
  }

  // PATCH –∑–∞–ø—Ä–æ—Å
  async patch<T>(endpoint: string, data: RequestBody, options?: RequestOptions): Promise<HttpResponse<T>> {
    try {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
      // if (Platform.OS !== 'web' && __DEV__) {
      //   console.log(`üì° PATCH ${this.baseUrl}${endpoint}`, {
      //     headers: options ? { ...options.headers } : {},
      //     data
      //   });
      // }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—è Content-Type –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      const requestOptions = {
        ...options,
        headers: {
          ...this.defaultHeaders,
          ...options?.headers,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await this.request<T>(endpoint, 'PATCH', data, requestOptions);
      
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      // if (Platform.OS !== 'web' && __DEV__) {
      //   console.log(`‚úÖ PATCH ${this.baseUrl}${endpoint} Response:`, response);
      // }
      
      return response;
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
      // if (Platform.OS !== 'web' && __DEV__) {
      //   console.error(`‚ùå PATCH ${this.baseUrl}${endpoint} Error:`, error);
      // }
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      if (error instanceof Error) {
        return {
          data: null,
          error: `[PATCH] ${error.name}: ${error.message}`,
          status: 500,
        };
      }
      
      return {
        data: null,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ PATCH-–∑–∞–ø—Ä–æ—Å–µ',
        status: 500,
      };
    }
  }

  // DELETE –∑–∞–ø—Ä–æ—Å
  async delete<T>(endpoint: string, options?: RequestOptions): Promise<HttpResponse<T>> {
    return this.request<T>(endpoint, 'DELETE', undefined, options);
  }
}

export default HttpClient;
