import HttpClient from '@/services/HttpClient';
import { Platform } from 'react-native';
import { 
  SpecimenImage,
  BatchSpecimenImageResult
} from '@/types';
import { authStorage } from '@/modules/auth/services';

// –ë–∞–∑–æ–≤—ã–π URL API —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
const API_BASE_URL = Platform.select({
  ios: 'http://192.168.0.11:7254',
  android: 'http://10.0.2.2:7254',
  default: 'http://localhost:7254',
});

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä HTTP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
const specimenImagesHttpClient = new HttpClient(API_BASE_URL, {
  Accept: 'application/json, text/plain',
  'Cache-Control': 'no-cache',
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
(async () => {
  try {
    const token = await authStorage.getAuthToken();
    if (token) {
      specimenImagesHttpClient.setAuthToken(token);
      console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    } else {
      console.warn('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
  }
})();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const logRequest = (method: string, url: string, data?: unknown) => {
  if (__DEV__) {
    console.log(`üåê ${method} ${url}`, data ? data : '');
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const logResponse = (method: string, url: string, response: unknown) => {
  if (__DEV__) {
    console.log(`‚úÖ ${method} ${url} Response:`, response);
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
const logError = (method: string, url: string, error: unknown) => {
  console.error(`‚ùå ${method} ${url} Error:`, error);
};

/**
 * API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
 */
export const specimenImagesApi = {
  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  updateAuthToken: async (): Promise<boolean> => {
    try {
      const token = await authStorage.getAuthToken();
      if (token) {
        specimenImagesHttpClient.setAuthToken(token);
        return true;
      }
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞
  getBySpecimenId: async (specimenId: number, includeImageData: boolean = true) => {
    return specimenImagesHttpClient.get<SpecimenImage[]>(
      `/api/v1/specimen-images/by-specimen/${specimenId}?includeImageData=${includeImageData}`
    );
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞
  getMainImageBySpecimenId: async (specimenId: number, includeImageData: boolean = true) => {
    return specimenImagesHttpClient.get<SpecimenImage>(
      `/api/v1/specimen-images/by-specimen/${specimenId}/main?includeImageData=${includeImageData}`
    );
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ ID
  getById: async (id: number) => {
    return specimenImagesHttpClient.get<SpecimenImage>(
      `/api/v1/specimen-images/${id}`
    );
  },

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  add: async (data: CreateSpecimenImageDto) => {
    return specimenImagesHttpClient.post<SpecimenImage>(
      '/api/v1/specimen-images',
      data as unknown as Record<string, unknown>
    );
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  update: async (id: number, data: UpdateSpecimenImageDto) => {
    return specimenImagesHttpClient.put<SpecimenImage>(
      `/api/v1/specimen-images/${id}`,
      data as unknown as Record<string, unknown>
    );
  },

  // –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  delete: async (id: number) => {
    const url = `/api/v1/specimen-images/${id}`;
    logRequest('DELETE', url);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
      await specimenImagesApi.updateAuthToken();
      
      const response = await specimenImagesHttpClient.delete<void>(url);
      logResponse('DELETE', url, response);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (response.status === 401) {
        console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
        // –£–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ
        const newResponse = await specimenImagesHttpClient.delete<void>(url);
        logResponse('DELETE (retry)', url, newResponse);
        return newResponse;
      }
      
      return response;
    } catch (error) {
      logError('DELETE', url, error);
      return { 
        data: null, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
        status: 500 
      };
    }
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
  setAsMain: async (id: number) => {
    const url = `/api/v1/specimen-images/${id}/set-as-main`;
    logRequest('PATCH', url);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
      await specimenImagesApi.updateAuthToken();
      
      // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const response = await specimenImagesHttpClient.patch<SpecimenImage>(
        url,
        {},
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );
      
      logResponse('PATCH', url, response);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (response.status === 401) {
        console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
        // –£–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ
        const newResponse = await specimenImagesHttpClient.patch<SpecimenImage>(
          url,
          {},
          {
            headers: {
              'Content-Type': 'application/json'
            }
          }
        );
        logResponse('PATCH (retry)', url, newResponse);
        return newResponse;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
      if (response.status >= 400) {
        return { 
          data: null, 
          error: response.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`, 
          status: response.status 
        };
      }
      
      return response;
    } catch (error) {
      logError('PATCH', url, error);
      return { 
        data: null, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
        status: 500 
      };
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞
  batchUpload: async (specimenId: number, imageUris: string[], isMain: boolean = false) => {
    const url = '/api/v1/specimen-images/batch-upload';
    logRequest('POST', url, { specimenId, imagesCount: imageUris.length, isMain });
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
      await specimenImagesApi.updateAuthToken();
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID –æ–±—Ä–∞–∑—Ü–∞
      formData.append('specimenId', specimenId.toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      formData.append('isMain', isMain.toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      imageUris.forEach((imageUri, index) => {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URI
        const uriParts = imageUri.split('/');
        const fileName = uriParts[uriParts.length - 1];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const fileType = fileName.split('.').pop()?.toLowerCase();
        const mimeType = fileType === 'png' ? 'image/png' : 
                        fileType === 'jpg' || fileType === 'jpeg' ? 'image/jpeg' : 
                        fileType === 'gif' ? 'image/gif' :
                        fileType === 'webp' ? 'image/webp' :
                        'application/octet-stream';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ formData
        formData.append('files', {
          uri: imageUri,
          name: fileName,
          type: mimeType,
        } as unknown as Blob);
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await specimenImagesHttpClient.post<BatchSpecimenImageResult>(
        url,
        formData as unknown as Record<string, unknown>,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          }
        }
      );
      
      logResponse('POST', url, response);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (response.status === 401) {
        console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å');
        // –£–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ        
        const newResponse = await specimenImagesHttpClient.post<BatchSpecimenImageResult>(
          url,
          formData as unknown as Record<string, unknown>,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            }
          }
        );
        logResponse('POST (retry)', url, newResponse);
        return newResponse;
      }
      
      return response;
    } catch (error) {
      logError('POST', url, error);
      return { 
        data: null, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', 
        status: 500 
      };
    }
  },
};

/**
 * DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export interface CreateSpecimenImageDto {
  specimenId: number;
  description?: string;
  isMain?: boolean;
  imageUrl?: string;
}

/**
 * DTO –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export interface UpdateSpecimenImageDto {
  description?: string;
  isMain?: boolean;
} 